// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: proto/ServiceTwo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceTwoClient is the client API for ServiceTwo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceTwoClient interface {
	HelloTwo(ctx context.Context, in *HelloTwoRequest, opts ...grpc.CallOption) (*HelloTwoResponse, error)
}

type serviceTwoClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceTwoClient(cc grpc.ClientConnInterface) ServiceTwoClient {
	return &serviceTwoClient{cc}
}

func (c *serviceTwoClient) HelloTwo(ctx context.Context, in *HelloTwoRequest, opts ...grpc.CallOption) (*HelloTwoResponse, error) {
	out := new(HelloTwoResponse)
	err := c.cc.Invoke(ctx, "/ServiceTwo/HelloTwo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceTwoServer is the server API for ServiceTwo service.
// All implementations must embed UnimplementedServiceTwoServer
// for forward compatibility
type ServiceTwoServer interface {
	HelloTwo(context.Context, *HelloTwoRequest) (*HelloTwoResponse, error)
	mustEmbedUnimplementedServiceTwoServer()
}

// UnimplementedServiceTwoServer must be embedded to have forward compatible implementations.
type UnimplementedServiceTwoServer struct {
}

func (UnimplementedServiceTwoServer) HelloTwo(context.Context, *HelloTwoRequest) (*HelloTwoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloTwo not implemented")
}
func (UnimplementedServiceTwoServer) mustEmbedUnimplementedServiceTwoServer() {}

// UnsafeServiceTwoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceTwoServer will
// result in compilation errors.
type UnsafeServiceTwoServer interface {
	mustEmbedUnimplementedServiceTwoServer()
}

func RegisterServiceTwoServer(s grpc.ServiceRegistrar, srv ServiceTwoServer) {
	s.RegisterService(&ServiceTwo_ServiceDesc, srv)
}

func _ServiceTwo_HelloTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTwoServer).HelloTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceTwo/HelloTwo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTwoServer).HelloTwo(ctx, req.(*HelloTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceTwo_ServiceDesc is the grpc.ServiceDesc for ServiceTwo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceTwo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceTwo",
	HandlerType: (*ServiceTwoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloTwo",
			Handler:    _ServiceTwo_HelloTwo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ServiceTwo.proto",
}
